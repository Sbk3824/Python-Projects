Lists and Tuples

tuples are immutable and lists are mutable. 

tuples are heterogeneous and lists are homogeneous. In other words:

Tuples (generally) are sequences of different kinds of stuff, and you deal with the tuple as a coherent unit.
Lists (generally) are sequences of the same kind of stuff, and you deal with the items individually.

Literal:
someTuple = (1,2)
someList  = [1,2] 

Size:
a = tuple(range(1000))
b = list(range(1000))

a.__sizeof__() # 8024
b.__sizeof__() # 9088

Due to the smaller size of a tuple operation, it becomes a bit faster, but not that much to mention about until you have a huge number of elements.

Permitted Operations:
b    = [1,2]   
b[0] = 3       # [3, 2]

a    = (1,2)
a[0] = 3     #Error

That also means that you can't delete an element or sort a tuple. However, you could add new element to both list and tuple with the only difference that you will change id of the tuple by adding element

Usage:
As a list is mutable, it can't be used as a key in a dictionary, whereas a tuple can be used.
a    = (1,2)
b    = [1,2] 

c = {a: 1}     # OK
c = {b: 1}     # Error

Tuple:


71
down vote
The key difference is that tuples are immutable. This means that you cannot change the values in a tuple once you have created it.

So if you're going to need to change the values use a List.

Benefits to tuples:

Slight performance improvement.
As a tuple is immutable it can be used as a key in a dictionary.
If you can't change it neither can anyone else, which is to say you don't need to worry about any API functions etc. changing your tuple without being asked.

*Lists are for looping, tuples are for structures i.e. "%s %s" %tuple.
*Lists are usually homogeneous, tuples are usually heterogeneous.
*Lists are for variable length, tuples are for fixed length.

